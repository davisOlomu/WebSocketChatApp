@{
    ViewData["Title"] = "Home Page";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">    <title>WebSocket Chat</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }

        #chat-box {
            width: 100%;
            height: 300px;
            border: 1px solid #ccc;
            padding: 10px;
            overflow-y: scroll;
            margin-bottom: 10px;
        }

        #message-input {
            width: 80%;
            padding: 10px;
            margin-right: 10px;
        }

        #send-button {
            padding: 10px 20px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div id="chat-box"></div>
    <input type="text" id="message-input" placeholder="Type your message here...">
    <button id="send-btn">Send</button>

    <script>
        const chatBox = document.getElementById('chat-box');
        const messageInput = document.getElementById('message-input');
        const sendBtn = document.getElementById('send-btn');

        // Establish a WebSocket connection
        const socket = new WebSocket('wss://localhost:7217/ws'); // Adjust the URL according to your server setup

        socket.onopen = function (event) {
            console.log("WebSocket is open now.");
        };

        // Event listener for when the WebSocket connection closes
        socket.onclose = function (event) {
            console.log("WebSocket is closed now.");
        };

        // Event listener for when an error occurs with the WebSocket
        socket.onerror = function (error) {
            console.log("WebSocket error: ", error);
        };

        // Listen for messages from the server
        socket.onmessage = function (event) {
            const message = event.data;
            displayMessage('Server: ' + message);
        };

        // Display messages in the chat box
        function displayMessage(message) {
            const messageElement = document.createElement('div');
            messageElement.textContent = message;
            chatBox.appendChild(messageElement);
            chatBox.scrollTop = chatBox.scrollHeight; // Scroll to the latest message
        }

        // Send a message when the Send button is clicked
        sendBtn.addEventListener('click', function () {
            const message = messageInput.value;
            if (message) {
                socket.send(message); // Send the message to the server
               // displayMessage('You: ' + message); // Display your own message
                messageInput.value = ''; // Clear the input field
            }
        });

        // Handle Enter key press to send messages
        messageInput.addEventListener('keypress', function (event) {
            if (event.key === 'Enter') {
                sendBtn.click();
            }
        });
    </script>
</body>
</html>

